#include <iostream>

using namespace std;

const int N = 8; 
int board[N][N]; // шахматная доска размеров 8х8
//массивы horizontal и vertical, которые содержат все возможные варианты ходов коня
int horizontal[N] = { 2, 1, -1, -2, -2, -1, 1, 2 }; // описание ходов по горизонтали
int vertical[N] = { -1, -2, -2, -1, 1, 2, 2, 1 }; // описание ходов по вертикали

void print() { // вывод матрицы на экран
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

bool horse(int x, int y) { // проверка возможности размещения коня на данной клетке, если клетка свободна, то функция возвращает true, если занята - false
    return (x >= 0 && x < N && y >= 0 && y < N && board[x][y] == -1);
}

bool func(int x, int y, int step) { // размещение коней на доске (рекурсивная функция), где x - координата коня по горизонтали на текущий момент,
    //y - координата коня по вертикали на текущий момент, step - количество ходов

    if (step == N * N) { // если все кони размещены
        return true;
    }

    for (int i = 0; i < 8; i++) { // попытка разместить коня на каждой клетке
        int X = x + horizontal[i];
        int Y = y + vertical[i];
        if (horse(X, Y)) { // проверка - свободна ли клетка
            if ((step % 2) != 0)  // если конь является нечетным по счету размещенным на доске, то он помечается на доске значением 1, иначе он помечается значением 0
                board[X][Y] = 1;
            else
                board[X][Y] = 0; //каждый четный ход обнуляется

            if (func(X, Y, step + 1))  // рекурсивно размещаем остальных коней
                return true;
        }
    }
    return false; // если не удалось разместить коня на всех клетках, возвращаем false
}

int main() {
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            board[i][j] = -1; 

    func(0, 0, 1);
    print();
    int count = 0;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (board[i][j] == 1)
                count++; // определение количества коней
        }
    }
    cout << endl << "Максимальное количество коней: " << count << endl; //выводим результат
}
