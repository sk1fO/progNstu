package AES128

const (
	NumRounds = 10 // Количество раундов для AES-128
)

// SBox представляет собой заменное таблицу для шифрования и расшифровки.
var SBox = []byte{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
}

// InvSBox представляет собой обратную замену для расшифровки.
var InvSBox = []byte{
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
}

// RCon содержит константы для расширения ключа.
var RCon = []byte{0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36}

// subBytes выполняет замену всех байтов состояния на их значения из SBox.
func subBytes(state [4][4]byte) [4][4]byte {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			state[i][j] = SBox[state[i][j]]
		}
	}
	return state
}

// invSubBytes выполняет обратную замену всех байтов состояния на их значения из InvSBox.
func invSubBytes(state [4][4]byte) [4][4]byte {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			state[i][j] = InvSBox[state[i][j]]
		}
	}
	return state
}

// shiftRows сдвигает каждую строку состояния на определенное количество позиций влево.
func shiftRows(state [4][4]byte) [4][4]byte {
	for i := 1; i < 4; i++ {
		for j := 0; j < i; j++ {
			temp := state[i][0]
			for k := 0; k < 3; k++ {
				state[i][k] = state[i][k+1]
			}
			state[i][3] = temp
		}
	}
	return state
}

// invShiftRows выполняет обратный сдвиг каждой строки состояния на определенное количество позиций вправо.
func invShiftRows(state [4][4]byte) [4][4]byte {
	for i := 1; i < 4; i++ {
		for j := 0; j < i; j++ {
			temp := state[i][3]
			for k := 3; k > 0; k-- {
				state[i][k] = state[i][k-1]
			}
			state[i][0] = temp
		}
	}
	return state
}

// mixColumns выполняет линейные преобразования над столбцами состояния.
func mixColumns(state [4][4]byte) [4][4]byte {
	var result [4][4]byte
	for i := 0; i < 4; i++ {
		result[0][i] = gMul(2, state[0][i]) ^ gMul(3, state[1][i]) ^ state[2][i] ^ state[3][i]
		result[1][i] = state[0][i] ^ gMul(2, state[1][i]) ^ gMul(3, state[2][i]) ^ state[3][i]
		result[2][i] = state[0][i] ^ state[1][i] ^ gMul(2, state[2][i]) ^ gMul(3, state[3][i])
		result[3][i] = gMul(3, state[0][i]) ^ state[1][i] ^ state[2][i] ^ gMul(2, state[3][i])
	}
	return result
}

// invMixColumns выполняет обратные линейные преобразования над столбцами состояния.
func invMixColumns(state [4][4]byte) [4][4]byte {
	var result [4][4]byte
	for i := 0; i < 4; i++ {
		result[0][i] = gMul(0xe, state[0][i]) ^ gMul(0xb, state[1][i]) ^ gMul(0xd, state[2][i]) ^ gMul(0x9, state[3][i])
		result[1][i] = gMul(0x9, state[0][i]) ^ gMul(0xe, state[1][i]) ^ gMul(0xb, state[2][i]) ^ gMul(0xd, state[3][i])
		result[2][i] = gMul(0xd, state[0][i]) ^ gMul(0x9, state[1][i]) ^ gMul(0xe, state[2][i]) ^ gMul(0xb, state[3][i])
		result[3][i] = gMul(0xb, state[0][i]) ^ gMul(0xd, state[1][i]) ^ gMul(0x9, state[2][i]) ^ gMul(0xe, state[3][i])
	}
	return result
}

// gMul выполняет умножение двух элементов поля GF(2^8).
func gMul(a, b byte) byte {
	var p byte
	for i := 0; i < 8; i++ {
		if (b & 1) != 0 {
			p ^= a
		}
		highBitSet := (a & 0x80) != 0
		a <<= 1
		if highBitSet {
			a ^= 0x1b
		}
		b >>= 1
	}
	return p
}

// addRoundKey выполняет XOR между состоянием и раундовым ключом.
func addRoundKey(state [4][4]byte, key [4][4]byte) [4][4]byte {
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			state[i][j] ^= key[i][j]
		}
	}
	return state
}

// keyExpansion расширяет ключ до нужной длины.
func keyExpansion(key [16]byte) [][4]byte {
	var expandedKey [][4]byte
	for i := 0; i < 4; i++ {
		expandedKey = append(expandedKey, [4]byte{key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]})
	}

	for i := 4; i < 4*(NumRounds+1); i++ {
		temp := expandedKey[i-1]
		if i%4 == 0 {
			temp = subWord(rotWord(temp))
			temp[0] ^= RCon[i/4-1]
		}
		expandedKey = append(expandedKey, [4]byte{
			expandedKey[i-4][0] ^ temp[0],
			expandedKey[i-4][1] ^ temp[1],
			expandedKey[i-4][2] ^ temp[2],
			expandedKey[i-4][3] ^ temp[3],
		})
	}
	return expandedKey
}

// rotWord выполняет циклический сдвиг слова влево на одну позицию.
func rotWord(word [4]byte) [4]byte {
	return [4]byte{word[1], word[2], word[3], word[0]}
}

// subWord выполняет замену каждого байта слова на его значение из SBox.
func subWord(word [4]byte) [4]byte {
	for i := 0; i < 4; i++ {
		word[i] = SBox[word[i]]
	}
	return word
}

// encryptFunc выполняет основную функцию шифрования AES-128.
func encryptFunc(plaintext [16]byte, key [16]byte) [16]byte {
	var state [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			state[j][i] = plaintext[4*i+j]
		}
	}

	expandedKey := keyExpansion(key)

	state = addRoundKey(state, [4][4]byte{expandedKey[0], expandedKey[1], expandedKey[2], expandedKey[3]})

	for round := 1; round < NumRounds; round++ {
		state = subBytes(state)
		state = shiftRows(state)
		state = mixColumns(state)
		state = addRoundKey(state, [4][4]byte{expandedKey[4*round], expandedKey[4*round+1], expandedKey[4*round+2], expandedKey[4*round+3]})
	}

	state = subBytes(state)
	state = shiftRows(state)
	state = addRoundKey(state, [4][4]byte{expandedKey[4*NumRounds], expandedKey[4*NumRounds+1], expandedKey[4*NumRounds+2], expandedKey[4*NumRounds+3]})

	var ciphertext [16]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			ciphertext[4*i+j] = state[j][i]
		}
	}

	return ciphertext
}

// decryptFunc выполняет основную функцию расшифровки AES-128.
func decryptFunc(ciphertext [16]byte, key [16]byte) [16]byte {
	var state [4][4]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			state[j][i] = ciphertext[4*i+j]
		}
	}

	expandedKey := keyExpansion(key)

	state = addRoundKey(state, [4][4]byte{expandedKey[4*NumRounds], expandedKey[4*NumRounds+1], expandedKey[4*NumRounds+2], expandedKey[4*NumRounds+3]})

	for round := NumRounds - 1; round > 0; round-- {
		state = invShiftRows(state)
		state = invSubBytes(state)
		state = addRoundKey(state, [4][4]byte{expandedKey[4*round], expandedKey[4*round+1], expandedKey[4*round+2], expandedKey[4*round+3]})
		state = invMixColumns(state)
	}

	state = invShiftRows(state)
	state = invSubBytes(state)
	state = addRoundKey(state, [4][4]byte{expandedKey[0], expandedKey[1], expandedKey[2], expandedKey[3]})

	var plaintext [16]byte
	for i := 0; i < 4; i++ {
		for j := 0; j < 4; j++ {
			plaintext[4*i+j] = state[j][i]
		}
	}

	return plaintext
}

// Encrypt шифрует входной текст с использованием AES-128.
func Encrypt(_plainText, _keyInput string) (_ciphertext string) {
	byteKey := []byte(_keyInput)
	byteInput := []byte(_plainText)

	for len(byteKey) < 16 {
		byteKey = append(byteKey, byteKey...)
	}
	key := [16]byte(byteKey)

	var byteCipher []byte
	var ciphertext [16]byte
	var plainText [16]byte

	for len(byteInput) != 0 {
		if len(byteInput) < 16 {
			byteInput = append(byteInput, 0)
		} else {
			plainText = [16]byte(byteInput)
			ciphertext = encryptFunc(plainText, key)
			byteCipher = append(byteCipher, ciphertext[:]...)
			byteInput = byteInput[16:]
		}
	}

	return string(byteCipher)
}

// Decrypt расшифровывает входную зашифрованную строку с использованием AES-128.
func Decrypt(_ciphertext, _keyInput string) (_plainText string) {
	byteKey := []byte(_keyInput)
	byteCipher := []byte(_ciphertext)

	for len(byteKey) < 16 {
		byteKey = append(byteKey, byteKey...)
	}
	key := [16]byte(byteKey)

	var bytePlane []byte
	var ciphertext [16]byte
	var plainText [16]byte

	for len(byteCipher) != 0 {
		if len(byteCipher) < 16 {
			byteCipher = append(byteCipher, 0)
		} else {
			ciphertext = [16]byte(byteCipher)
			plainText = decryptFunc(ciphertext, key)
			bytePlane = append(bytePlane, plainText[:]...)
			byteCipher = byteCipher[16:]
		}
	}

	return string(bytePlane)
}
